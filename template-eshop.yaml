---
# Source: eshop/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: eshop-eshop
  namespace: dev
  labels:
    app.kubernetes.io/name: eshop
    app.kubernetes.io/instance: eshop
---
# Source: eshop/charts/basket/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: eshop-basket-secrets
  namespace: dev
  labels:
    app.kubernetes.io/name: basket
    app.kubernetes.io/instance: eshop
type: Opaque
data:
  REDIS_CONNECTION: 
  EVENTBUS_CONNECTION: 
  IDENTITY_URL:
---
# Source: eshop/charts/catalog/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: eshop-catalog-secrets
  namespace: dev
  labels:
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: eshop
type: Opaque
data:
  CATALOGDB_CONNECTION: 
  EVENTBUS_CONNECTION:
---
# Source: eshop/charts/catalogdb/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: eshop-catalogdb-secrets
  namespace: dev
  labels:
    app.kubernetes.io/name: catalogdb
    app.kubernetes.io/instance: eshop
type: Opaque
data:
  POSTGRES_PASSWORD:
---
# Source: eshop/charts/identity/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: eshop-identity-secrets
  namespace: dev
  labels:
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: eshop
type: Opaque
data:
  IDENTITYDB_CONNECTION: 
  EVENTBUS_CONNECTION:
---
# Source: eshop/charts/mobilebff/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: eshop-mobilebff-secrets
  namespace: dev
  labels:
    app.kubernetes.io/name: mobilebff
    app.kubernetes.io/instance: eshop
type: Opaque
data:
  IDENTITY_URL: 
  CATALOG_URL: 
  ORDERING_URL: 
  BASKET_URL:
---
# Source: eshop/charts/ordering/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: eshop-ordering-secrets
  namespace: dev
  labels:
    app.kubernetes.io/name: ordering
    app.kubernetes.io/instance: eshop
type: Opaque
data:
  ORDERINGDB_CONNECTION: 
  EVENTBUS_CONNECTION: 
  IDENTITY_URL:
---
# Source: eshop/charts/orderprocessor/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: eshop-orderprocessor-secrets
  namespace: dev
  labels:
    app.kubernetes.io/name: orderprocessor
    app.kubernetes.io/instance: eshop
type: Opaque
data:
  EVENTBUS_CONNECTION: 
  ORDERINGDB_CONNECTION:
---
# Source: eshop/charts/paymentprocessor/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: eshop-paymentprocessor-secrets
  namespace: dev
  labels:
    app.kubernetes.io/name: paymentprocessor
    app.kubernetes.io/instance: eshop
type: Opaque
data:
  EVENTBUS_CONNECTION:
---
# Source: eshop/charts/rabbitmq/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: eshop-rabbitmq-secrets
  namespace: dev
  labels:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: eshop
type: Opaque
data:
  RABBITMQ_DEFAULT_PASS:
---
# Source: eshop/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: eshop-redis-secrets
  namespace: dev
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: eshop
type: Opaque
data:
  REDIS_PASSWORD:
---
# Source: eshop/charts/webapp/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: eshop-webapp-secrets
  namespace: dev
  labels:
    app.kubernetes.io/name: webapp
    app.kubernetes.io/instance: eshop
type: Opaque
data:
  IDENTITY_URL: 
  CATALOG_URL: 
  BASKET_URL: 
  ORDERING_URL: 
  EVENTBUS_CONNECTION:
---
# Source: eshop/charts/webhooks/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: eshop-webhooks-secrets
  namespace: dev
  labels:
    app.kubernetes.io/name: webhooks
    app.kubernetes.io/instance: eshop
type: Opaque
data:
  WEBHOOKSDB_CONNECTION: 
  EVENTBUS_CONNECTION:
---
# Source: eshop/charts/basket/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eshop-basket-config
  namespace: dev
  labels:
    app.kubernetes.io/name: basket
    app.kubernetes.io/instance: eshop
data:
  APP_ENV: production
---
# Source: eshop/charts/catalog/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eshop-catalog-config
  namespace: dev
  labels:
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: eshop
data:
  APP_ENV: production
---
# Source: eshop/charts/catalogdb/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eshop-catalogdb-config
  namespace: dev
  labels:
    app.kubernetes.io/name: catalogdb
    app.kubernetes.io/instance: eshop
data:
  APP_ENV: production
---
# Source: eshop/charts/catalogdb/templates/init-script-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eshop-catalogdb-init-script
  namespace: dev
  labels:
    app.kubernetes.io/name: catalogdb
    app.kubernetes.io/instance: eshop
data:
  init-db.sh: |
---
# Source: eshop/charts/identity/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eshop-identity-config
  namespace: dev
  labels:
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: eshop
data:
  APP_ENV: production
---
# Source: eshop/charts/mobilebff/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eshop-mobilebff-config
  namespace: dev
  labels:
    app.kubernetes.io/name: mobilebff
    app.kubernetes.io/instance: eshop
data:
  APP_ENV: production
---
# Source: eshop/charts/ordering/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eshop-ordering-config
  namespace: dev
  labels:
    app.kubernetes.io/name: ordering
    app.kubernetes.io/instance: eshop
data:
  APP_ENV: production
---
# Source: eshop/charts/orderprocessor/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eshop-orderprocessor-config
  namespace: dev
  labels:
    app.kubernetes.io/name: orderprocessor
    app.kubernetes.io/instance: eshop
data:
  APP_ENV: production
---
# Source: eshop/charts/paymentprocessor/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eshop-paymentprocessor-config
  namespace: dev
  labels:
    app.kubernetes.io/name: paymentprocessor
    app.kubernetes.io/instance: eshop
data:
  APP_ENV: production
---
# Source: eshop/charts/rabbitmq/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eshop-rabbitmq-config
  namespace: dev
  labels:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: eshop
data:
  rabbitmq.conf: |
    # Minimal configuration for RabbitMQ
    default_user = guest
    default_pass = guest
    default_vhost = /
    listeners.tcp.default = 5672
    management.listener.port = 15672
---
# Source: eshop/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eshop-redis-config
  namespace: dev
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: eshop
data:
  APP_ENV: production
---
# Source: eshop/charts/webapp/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eshop-webapp-config
  namespace: dev
  labels:
    app.kubernetes.io/name: webapp
    app.kubernetes.io/instance: eshop
data:
  APP_ENV: production
---
# Source: eshop/charts/webhooks/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eshop-webhooks-config
  namespace: dev
  labels:
    app.kubernetes.io/name: webhooks
    app.kubernetes.io/instance: eshop
data:
  APP_ENV: production
---
# Source: eshop/charts/basket/templates/deployment.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: eshop-basket-pvc
  namespace: dev
  labels:
    app.kubernetes.io/name: basket
    app.kubernetes.io/instance: eshop
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 100Mi
---
# Source: eshop/charts/identity/templates/deployment.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: eshop-identity-pvc
  namespace: dev
  labels:
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: eshop
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 100Mi
---
# Source: eshop/charts/ordering/templates/deployment.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: eshop-ordering-pvc
  namespace: dev
  labels:
    app.kubernetes.io/name: ordering
    app.kubernetes.io/instance: eshop
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 100Mi
---
# Source: eshop/charts/webapp/templates/deployment.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: eshop-webapp-pvc
  namespace: dev
  labels:
    app.kubernetes.io/name: webapp
    app.kubernetes.io/instance: eshop
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 100Mi
---
# Source: eshop/charts/basket/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eshop-basket
  namespace: dev
  labels:
    app.kubernetes.io/name: basket
    app.kubernetes.io/instance: eshop
spec:
  type: ClusterIP
  ports:
    - port: 5221
      targetPort: 5221
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: basket
    app.kubernetes.io/instance: eshop
---
# Source: eshop/charts/catalog/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eshop-catalog
  namespace: dev
  labels:
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: eshop
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: eshop
---
# Source: eshop/charts/catalogdb/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eshop-catalogdb-headless
  namespace: dev
  labels:
    app.kubernetes.io/name: catalogdb
    app.kubernetes.io/instance: eshop
spec:
  clusterIP: None
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgres
  selector:
    app.kubernetes.io/name: catalogdb
    app.kubernetes.io/instance: eshop
---
# Source: eshop/charts/catalogdb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eshop-catalogdb
  namespace: dev
  labels:
    app.kubernetes.io/name: catalogdb
    app.kubernetes.io/instance: eshop
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgres
  selector:
    app.kubernetes.io/name: catalogdb
    app.kubernetes.io/instance: eshop
---
# Source: eshop/charts/identity/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eshop-identity
  namespace: dev
  labels:
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: eshop
spec:
  type: ClusterIP
  ports:
    - port: 5001
      targetPort: 5001
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: eshop
---
# Source: eshop/charts/mobilebff/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eshop-mobilebff
  namespace: dev
  labels:
    app.kubernetes.io/name: mobilebff
    app.kubernetes.io/instance: eshop
spec:
  type: ClusterIP
  ports:
    - port: 11632
      targetPort: 11632
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: mobilebff
    app.kubernetes.io/instance: eshop
---
# Source: eshop/charts/ordering/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eshop-ordering
  namespace: dev
  labels:
    app.kubernetes.io/name: ordering
    app.kubernetes.io/instance: eshop
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: ordering
    app.kubernetes.io/instance: eshop
---
# Source: eshop/charts/orderprocessor/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eshop-orderprocessor
  namespace: dev
  labels:
    app.kubernetes.io/name: orderprocessor
    app.kubernetes.io/instance: eshop
spec:
  type: ClusterIP
  ports:
    - port: 16888
      targetPort: 16888
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: orderprocessor
    app.kubernetes.io/instance: eshop
---
# Source: eshop/charts/paymentprocessor/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eshop-paymentprocessor
  namespace: dev
  labels:
    app.kubernetes.io/name: paymentprocessor
    app.kubernetes.io/instance: eshop
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: paymentprocessor
    app.kubernetes.io/instance: eshop
---
# Source: eshop/charts/rabbitmq/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eshop-rabbitmq-headless
  namespace: dev
  labels:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: eshop
spec:
  clusterIP: None
  ports:
    - port: 5672
      targetPort: 5672
      protocol: TCP
      name: amqp
    - port: 15672
      targetPort: 15672
      protocol: TCP
      name: management
  selector:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: eshop
---
# Source: eshop/charts/rabbitmq/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eshop-rabbitmq
  namespace: dev
  labels:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: eshop
spec:
  type: ClusterIP
  ports:
    - port: 5672
      targetPort: 5672
      protocol: TCP
      name: amqp
    - port: 15672
      targetPort: 15672
      protocol: TCP
      name: management
  selector:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: eshop
---
# Source: eshop/charts/redis/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eshop-redis-headless
  namespace: dev
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: eshop
spec:
  clusterIP: None
  ports:
    - port: 6379
      targetPort: 6379
      protocol: TCP
      name: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: eshop
---
# Source: eshop/charts/redis/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eshop-redis
  namespace: dev
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: eshop
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
      protocol: TCP
      name: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: eshop
---
# Source: eshop/charts/webapp/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eshop-webapp
  namespace: dev
  labels:
    app.kubernetes.io/name: webapp
    app.kubernetes.io/instance: eshop
spec:
  type: ClusterIP
  ports:
    - port: 5004
      targetPort: 5004
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: webapp
    app.kubernetes.io/instance: eshop
---
# Source: eshop/charts/webhooks/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eshop-webhooks
  namespace: dev
  labels:
    app.kubernetes.io/name: webhooks
    app.kubernetes.io/instance: eshop
spec:
  type: ClusterIP
  ports:
    - port: 5101
      targetPort: 5101
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: webhooks
    app.kubernetes.io/instance: eshop
---
# Source: eshop/charts/basket/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eshop-basket
  namespace: dev
  labels:
    app.kubernetes.io/name: basket
    app.kubernetes.io/instance: eshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: basket
      app.kubernetes.io/instance: eshop
  template:
    metadata:
      labels:
        app.kubernetes.io/name: basket
        app.kubernetes.io/instance: eshop
    spec:
      initContainers:
        - command:
          - /bin/sh
          - -c
          - |
            until nslookup eshop-redis && nslookup eshop-rabbitmq; do echo "waiting for redis and rabbitmq"; sleep 2; done;
          image: busybox:latest
          name: wait-for-dependencies
      containers:
        - name: basket
          image: basket-api:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5221
              name: http
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: "Development"
            - name: ASPNETCORE_URLS
              value: "http://*:5221"
            - name: DOTNET_READYTORUN
              value: "1"
            - name: DOTNET_TieredPGO
              value: "1"
            - name: ConnectionStrings__Redis
              valueFrom:
                secretKeyRef:
                  name: eshop-basket-secrets
                  key: REDIS_CONNECTION
            - name: ConnectionStrings__EventBus
              valueFrom:
                secretKeyRef:
                  name: eshop-basket-secrets
                  key: EVENTBUS_CONNECTION
            - name: Identity__Url
              valueFrom:
                secretKeyRef:
                  name: eshop-basket-secrets
                  key: IDENTITY_URL
          volumeMounts:
            - name: basket-data-protection
              mountPath: /app/keys
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 5221
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 5221
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
      volumes:
        - name: basket-data-protection
          persistentVolumeClaim:
            claimName: eshop-basket-pvc
---
# Source: eshop/charts/catalog/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eshop-catalog
  namespace: dev
  labels:
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: eshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: catalog
      app.kubernetes.io/instance: eshop
  template:
    metadata:
      labels:
        app.kubernetes.io/name: catalog
        app.kubernetes.io/instance: eshop
    spec:
      initContainers:
        - command:
          - /bin/sh
          - -c
          - |
            until nslookup eshop-catalogdb && nslookup eshop-rabbitmq; do echo "waiting for catalogdb and rabbitmq"; sleep 2; done;
          image: busybox:latest
          name: wait-for-dependencies
      containers:
        - name: catalog
          image: catalog-api:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
              name: http
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: "Development"
            - name: ASPNETCORE_URLS
              value: "http://*:80"
            - name: DOTNET_READYTORUN
              value: "1"
            - name: DOTNET_TieredPGO
              value: "1"
            - name: ConnectionStrings__CatalogDB
              valueFrom:
                secretKeyRef:
                  name: eshop-catalog-secrets
                  key: CATALOGDB_CONNECTION
            - name: ConnectionStrings__EventBus
              valueFrom:
                secretKeyRef:
                  name: eshop-catalog-secrets
                  key: EVENTBUS_CONNECTION
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 80
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 80
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
---
# Source: eshop/charts/identity/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eshop-identity
  namespace: dev
  labels:
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: eshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: identity
      app.kubernetes.io/instance: eshop
  template:
    metadata:
      labels:
        app.kubernetes.io/name: identity
        app.kubernetes.io/instance: eshop
    spec:
      initContainers:
        - command:
          - /bin/sh
          - -c
          - |
            until nslookup eshop-catalogdb && nslookup eshop-rabbitmq; do echo "waiting for catalogdb and rabbitmq"; sleep 2; done;
          image: busybox:latest
          name: wait-for-dependencies
      containers:
        - name: identity
          image: identity-api:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5001
              name: http
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: "Development"
            - name: ASPNETCORE_URLS
              value: "http://*:5001"
            - name: MauiCallback
              value: "http://identity-api:5001/callback"
            - name: WebAppClient
              value: "http://localhost:16889"
            - name: ConnectionStrings__IdentityDB
              valueFrom:
                secretKeyRef:
                  name: eshop-identity-secrets
                  key: IDENTITYDB_CONNECTION
            - name: ConnectionStrings__EventBus
              valueFrom:
                secretKeyRef:
                  name: eshop-identity-secrets
                  key: EVENTBUS_CONNECTION
          volumeMounts:
            - name: data-protection-keys
              mountPath: /root/.aspnet/data-protection-keys
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 5001
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 5001
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
      volumes:
        - name: data-protection-keys
          persistentVolumeClaim:
            claimName: eshop-identity-pvc
---
# Source: eshop/charts/mobilebff/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eshop-mobilebff
  namespace: dev
  labels:
    app.kubernetes.io/name: mobilebff
    app.kubernetes.io/instance: eshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mobilebff
      app.kubernetes.io/instance: eshop
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mobilebff
        app.kubernetes.io/instance: eshop
    spec:
      initContainers:
        - command:
          - /bin/sh
          - -c
          - |
            until nslookup eshop-identity && nslookup eshop-catalog &&
                  nslookup eshop-ordering && nslookup eshop-basket;
            do echo "waiting for dependencies"; sleep 2; done;
          image: busybox:latest
          name: wait-for-dependencies
      containers:
        - name: mobilebff
          image: mobile-bff:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 11632
              name: http
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: "Development"
            - name: ASPNETCORE_URLS
              value: "http://*:11632"
            - name: Identity__Url
              valueFrom:
                secretKeyRef:
                  name: eshop-mobilebff-secrets
                  key: IDENTITY_URL
            - name: Catalog__Url
              valueFrom:
                secretKeyRef:
                  name: eshop-mobilebff-secrets
                  key: CATALOG_URL
            - name: Ordering__Url
              valueFrom:
                secretKeyRef:
                  name: eshop-mobilebff-secrets
                  key: ORDERING_URL
            - name: Basket__Url
              valueFrom:
                secretKeyRef:
                  name: eshop-mobilebff-secrets
                  key: BASKET_URL
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 11632
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 90
            timeoutSeconds: 30
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 11632
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 90
            timeoutSeconds: 30
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
---
# Source: eshop/charts/ordering/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eshop-ordering
  namespace: dev
  labels:
    app.kubernetes.io/name: ordering
    app.kubernetes.io/instance: eshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ordering
      app.kubernetes.io/instance: eshop
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ordering
        app.kubernetes.io/instance: eshop
    spec:
      initContainers:
        - command:
          - /bin/sh
          - -c
          - |
            until nslookup eshop-rabbitmq &&
                  nslookup eshop-catalogdb &&
                  nslookup eshop-identity;
            do echo "waiting for dependencies"; sleep 2; done;
          image: busybox:latest
          name: wait-for-dependencies
      containers:
        - name: ordering
          image: ordering-api:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: "Development"
            - name: ASPNETCORE_URLS
              value: "http://*:8080"
            - name: RabbitMQ__Host
              value: "rabbitmq"
            - name: RabbitMQ__Port
              value: "5672"
            - name: ConnectionStrings__orderingdb
              valueFrom:
                secretKeyRef:
                  name: eshop-ordering-secrets
                  key: ORDERINGDB_CONNECTION
            - name: ConnectionStrings__EventBus
              valueFrom:
                secretKeyRef:
                  name: eshop-ordering-secrets
                  key: EVENTBUS_CONNECTION
            - name: Identity__Url
              valueFrom:
                secretKeyRef:
                  name: eshop-ordering-secrets
                  key: IDENTITY_URL
          volumeMounts:
            - name: ordering-api-keys
              mountPath: /app/keys
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
      volumes:
        - name: ordering-api-keys
          persistentVolumeClaim:
            claimName: eshop-ordering-pvc
---
# Source: eshop/charts/orderprocessor/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eshop-orderprocessor
  namespace: dev
  labels:
    app.kubernetes.io/name: orderprocessor
    app.kubernetes.io/instance: eshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: orderprocessor
      app.kubernetes.io/instance: eshop
  template:
    metadata:
      labels:
        app.kubernetes.io/name: orderprocessor
        app.kubernetes.io/instance: eshop
    spec:
      initContainers:
        - command:
          - /bin/sh
          - -c
          - |
            until nslookup eshop-rabbitmq && nslookup eshop-catalogdb; do echo "waiting for dependencies"; sleep 2; done;
          image: busybox:latest
          name: wait-for-dependencies
      containers:
        - name: orderprocessor
          image: order-processor:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 16888
              name: http
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: "Development"
            - name: ASPNETCORE_URLS
              value: "http://*:16888"
            - name: ConnectionStrings__EventBus
              valueFrom:
                secretKeyRef:
                  name: eshop-orderprocessor-secrets
                  key: EVENTBUS_CONNECTION
            - name: ConnectionStrings__orderingdb
              valueFrom:
                secretKeyRef:
                  name: eshop-orderprocessor-secrets
                  key: ORDERINGDB_CONNECTION
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 16888
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 16888
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
---
# Source: eshop/charts/paymentprocessor/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eshop-paymentprocessor
  namespace: dev
  labels:
    app.kubernetes.io/name: paymentprocessor
    app.kubernetes.io/instance: eshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: paymentprocessor
      app.kubernetes.io/instance: eshop
  template:
    metadata:
      labels:
        app.kubernetes.io/name: paymentprocessor
        app.kubernetes.io/instance: eshop
    spec:
      initContainers:
        - command:
          - /bin/sh
          - -c
          - |
            until nslookup eshop-rabbitmq; do echo "waiting for rabbitmq"; sleep 2; done;
          image: busybox:latest
          name: wait-for-dependencies
      containers:
        - name: paymentprocessor
          image: payment-processor:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: "Development"
            - name: ConnectionStrings__EventBus
              valueFrom:
                secretKeyRef:
                  name: eshop-paymentprocessor-secrets
                  key: EVENTBUS_CONNECTION
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
---
# Source: eshop/charts/webapp/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eshop-webapp
  namespace: dev
  labels:
    app.kubernetes.io/name: webapp
    app.kubernetes.io/instance: eshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: webapp
      app.kubernetes.io/instance: eshop
  template:
    metadata:
      labels:
        app.kubernetes.io/name: webapp
        app.kubernetes.io/instance: eshop
    spec:
      initContainers:
        - command:
          - /bin/sh
          - -c
          - "until nslookup eshop-identity && \n      nslookup eshop-catalog && \n      nslookup
            eshop-ordering && \n      nslookup eshop-basket && \n      nslookup eshop-rabbitmq;\ndo
            echo \"waiting for dependencies\"; sleep 2; done;\n"
          image: busybox:latest
          name: wait-for-dependencies
      containers:
        - name: webapp
          image: webapp:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5004
              name: http
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: "Development"
            - name: ASPNETCORE_URLS
              value: "http://*:5004"
            - name: CallBackUrl
              value: "http://webapp:5004"
            - name: EventBus__HostName
              value: "rabbitmq"
            - name: EventBus__RetryCount
              value: "5"
            - name: EventBus__SubscriptionClientName
              value: "Ordering.webapp"
            - name: EventBus__UserName
              value: "guest"
            - name: IdentityUrl
              valueFrom:
                secretKeyRef:
                  name: eshop-webapp-secrets
                  key: IDENTITY_URL
            - name: Catalog__Url
              valueFrom:
                secretKeyRef:
                  name: eshop-webapp-secrets
                  key: CATALOG_URL
            - name: Basket__Url
              valueFrom:
                secretKeyRef:
                  name: eshop-webapp-secrets
                  key: BASKET_URL
            - name: Ordering__Url
              valueFrom:
                secretKeyRef:
                  name: eshop-webapp-secrets
                  key: ORDERING_URL
            - name: ConnectionStrings__EventBus
              valueFrom:
                secretKeyRef:
                  name: eshop-webapp-secrets
                  key: EVENTBUS_CONNECTION
          volumeMounts:
            - name: data-protection-keys
              mountPath: /root/.aspnet/data-protection-keys
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 5004
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 5004
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
      volumes:
        - name: data-protection-keys
          persistentVolumeClaim:
            claimName: eshop-webapp-pvc
---
# Source: eshop/charts/webhooks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eshop-webhooks
  namespace: dev
  labels:
    app.kubernetes.io/name: webhooks
    app.kubernetes.io/instance: eshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: webhooks
      app.kubernetes.io/instance: eshop
  template:
    metadata:
      labels:
        app.kubernetes.io/name: webhooks
        app.kubernetes.io/instance: eshop
    spec:
      initContainers:
        - command:
          - /bin/sh
          - -c
          - |
            until nslookup eshop-catalogdb && nslookup eshop-rabbitmq; do echo "waiting for dependencies"; sleep 2; done;
          image: busybox:latest
          name: wait-for-dependencies
      containers:
        - name: webhooks
          image: webhooks-api:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5101
              name: http
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: "Development"
            - name: ASPNETCORE_URLS
              value: "http://*:5101"
            - name: ConnectionStrings__WebhooksDB
              valueFrom:
                secretKeyRef:
                  name: eshop-webhooks-secrets
                  key: WEBHOOKSDB_CONNECTION
            - name: ConnectionStrings__EventBus
              valueFrom:
                secretKeyRef:
                  name: eshop-webhooks-secrets
                  key: EVENTBUS_CONNECTION
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 5101
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 5101
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
---
# Source: eshop/charts/catalogdb/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: eshop-catalogdb
  namespace: dev
  labels:
    app.kubernetes.io/name: catalogdb
    app.kubernetes.io/instance: eshop
spec:
  serviceName: eshop-catalogdb-headless
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: catalogdb
      app.kubernetes.io/instance: eshop
  template:
    metadata:
      labels:
        app.kubernetes.io/name: catalogdb
        app.kubernetes.io/instance: eshop
    spec:
      containers:
        - name: catalogdb
          image: ankane/pgvector:latest
          imagePullPolicy: IfNotPresent
          command:
            - postgres
            - -c
            - shared_buffers=512MB
            - -c
            - max_connections=200
            - -c
            - fsync=off
          ports:
            - containerPort: 5432
              name: postgres
          env:
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
            - name: POSTGRES_DB
              value: "catalogdb"
            - name: POSTGRES_HOST_AUTH_METHOD
              value: "trust"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: eshop-catalogdb-secrets
                  key: POSTGRES_PASSWORD
          volumeMounts:
            - name: pg-data
              mountPath: /var/lib/postgresql/data
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d/init-db.sh
              subPath: init-db.sh
          livenessProbe:
            exec:
              command:
              - pg_isready
              - -U
              - postgres
              - -d
              - catalogdb
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
              - pg_isready
              - -U
              - postgres
              - -d
              - catalogdb
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
      volumes:
        - name: init-script
          configMap:
            name: eshop-catalogdb-init-script
            items:
              - key: init-db.sh
                path: init-db.sh
                mode: 0755
  volumeClaimTemplates:
    - metadata:
        name: pg-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: local-path
        resources:
          requests:
            storage: 1Gi
---
# Source: eshop/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: eshop-rabbitmq
  namespace: dev
  labels:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: eshop
spec:
  serviceName: eshop-rabbitmq-headless
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: eshop
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        app.kubernetes.io/instance: eshop
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3.12-management-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5672
              name: amqp
            - containerPort: 15672
              name: management
          env:
            - name: RABBITMQ_CTL_ERL_ARGS
              value: "+P 1048576 +K true +A 128"
            - name: RABBITMQ_DEFAULT_USER
              value: "guest"
            - name: RABBITMQ_DEFAULT_VHOST
              value: "/"
            - name: RABBITMQ_MNESIA_BASE
              value: "/var/lib/rabbitmq/mnesia"
            - name: RABBITMQ_NODENAME
              value: "rabbit@rabbitmq"
            - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
              value: "+sbwt none +sbwtdcpu none +sbwtdio none +stbt db"
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  name: eshop-rabbitmq-secrets
                  key: RABBITMQ_DEFAULT_PASS
          volumeMounts:
            - name: rmq-data
              mountPath: /var/lib/rabbitmq
            - name: rabbitmq-config
              mountPath: /etc/rabbitmq/rabbitmq.conf
              subPath: rabbitmq.conf
          livenessProbe:
            exec:
              command:
              - rabbitmq-diagnostics
              - -q
              - ping
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
              - rabbitmq-diagnostics
              - -q
              - ping
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
      volumes:
        - name: rabbitmq-config
          configMap:
            name: eshop-rabbitmq-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
  volumeClaimTemplates:
    - metadata:
        name: rmq-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: standard
        resources:
          requests:
            storage: 1Gi
---
# Source: eshop/charts/redis/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: eshop-catalogdb
  namespace: dev
  labels:
    app.kubernetes.io/name: catalogdb
    helm.sh/chart: catalogdb-0.1.0
    app.kubernetes.io/instance: eshop
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: eshop-catalogdb-headless
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: catalogdb
      app.kubernetes.io/instance: eshop
  template:
    metadata:
      labels:
        app.kubernetes.io/name: catalogdb
        app.kubernetes.io/instance: eshop
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      containers:
        - name: catalogdb
          image: ankane/pgvector:latest
          imagePullPolicy: IfNotPresent
          command:
            - postgres
            - -c
            - shared_buffers=512MB
            - -c
            - max_connections=200
            - -c
            - fsync=off
          ports:
            - containerPort: 5432
              name: postgres
          env:
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
            - name: POSTGRES_DB
              value: "catalogdb"
            - name: POSTGRES_HOST_AUTH_METHOD
              value: "trust"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: eshop-catalogdb-secrets
                  key: POSTGRES_PASSWORD
          volumeMounts:
            - name: pg-data
              mountPath: /var/lib/postgresql/data
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d/init-db.sh
              subPath: init-db.sh
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
                - -d
                - catalogdb
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
                - -d
                - catalogdb
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
      volumes:
        - name: init-script
          configMap:
            name: eshop-catalogdb-init-script
            items:
              - key: init-db.sh
                path: init-db.sh
                mode: 0755
  volumeClaimTemplates:
    - metadata:
        name: pg-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: 
        resources:
          requests:
            storage: 1Gi
---
# Source: eshop/charts/basket/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "eshop-basket-test-connection"
  labels:
    app.kubernetes.io/name: basket
    app.kubernetes.io/instance: eshop
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['eshop-basket:5221']
  restartPolicy: Never
---
# Source: eshop/charts/catalog/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "eshop-catalog-test-connection"
  labels:
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: eshop
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['eshop-catalog:80']
  restartPolicy: Never
---
# Source: eshop/charts/catalogdb/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "eshop-catalogdb-test-connection"
  labels:
    app.kubernetes.io/name: catalogdb
    app.kubernetes.io/instance: eshop
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['eshop-catalogdb:5432']
  restartPolicy: Never
---
# Source: eshop/charts/mobilebff/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "eshop-mobilebff-test-connection"
  labels:
    app.kubernetes.io/name: mobilebff
    app.kubernetes.io/instance: eshop
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['eshop-mobilebff:11632']
  restartPolicy: Never
---
# Source: eshop/charts/ordering/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "eshop-ordering-test-connection"
  labels:
    app.kubernetes.io/name: ordering
    app.kubernetes.io/instance: eshop
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['eshop-ordering:8080']
  restartPolicy: Never
---
# Source: eshop/charts/orderprocessor/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "eshop-orderprocessor-test-connection"
  labels:
    app.kubernetes.io/name: orderprocessor
    app.kubernetes.io/instance: eshop
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['eshop-orderprocessor:16888']
  restartPolicy: Never
---
# Source: eshop/charts/paymentprocessor/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "eshop-paymentprocessor-test-connection"
  labels:
    app.kubernetes.io/name: paymentprocessor
    app.kubernetes.io/instance: eshop
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['eshop-paymentprocessor:8080']
  restartPolicy: Never
---
# Source: eshop/charts/rabbitmq/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "eshop-rabbitmq-test-connection"
  labels:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: eshop
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['eshop-rabbitmq:']
  restartPolicy: Never
---
# Source: eshop/charts/redis/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "eshop-redis-test-connection"
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: eshop
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['eshop-redis:6379']
  restartPolicy: Never
---
# Source: eshop/charts/webapp/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "eshop-webapp-test-connection"
  labels:
    app.kubernetes.io/name: webapp
    app.kubernetes.io/instance: eshop
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['eshop-webapp:5004']
  restartPolicy: Never
---
# Source: eshop/charts/webhooks/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "eshop-webhooks-test-connection"
  labels:
    app.kubernetes.io/name: webhooks
    app.kubernetes.io/instance: eshop
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['eshop-webhooks:5101']
  restartPolicy: Never
---
# Source: eshop/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "eshop-eshop-test-connection"
  labels:
    app.kubernetes.io/name: eshop
    app.kubernetes.io/instance: eshop
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['eshop-eshop:']
  restartPolicy: Never
